# see documents in sysctl directory and ip-sysctl.txt for reference

#arp_ignore - INTEGER
#	Define different modes for sending replies in response to
#	received ARP requests that resolve local target IP addresses:
#	0 - (default): reply for any local target IP address, configured
#	on any interface
#	1 - reply only if the target IP address is local address
#	configured on the incoming interface
#	2 - reply only if the target IP address is local address
#	configured on the incoming interface and both with the
#	sender's IP address are part from same subnet on this interface
#	3 - do not reply for local addresses configured with scope host,
#	only resolutions for global and link addresses are replied
#	4-7 - reserved
#	8 - do not reply for all local addresses
#
#	The max value from conf/{all,interface}/arp_ignore is used
#	when ARP request is received on the {interface}

net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1

#arp_filter - BOOLEAN
#	1 - Allows you to have multiple network interfaces on the same
#	subnet, and have the ARPs for each interface be answered
#	based on whether or not the kernel would route a packet from
#	the ARP'd IP out that interface (therefore you must use source
#	based routing for this to work). In other words it allows control
#	of which cards (usually 1) will respond to an arp request.
#
#	0 - (default) The kernel can respond to arp requests with addresses
#	from other interfaces. This may seem wrong but it usually makes
#	sense, because it increases the chance of successful communication.
#	IP addresses are owned by the complete host on Linux, not by
#	particular interfaces. Only for more complex setups like load-
#	balancing, does this behaviour cause problems.
#
#	arp_filter for the interface will be enabled if at least one of
#	conf/{all,interface}/arp_filter is set to TRUE,
#	it will be disabled otherwise

net.ipv4.conf.all.arp_filter = 1
net.ipv4.conf.default.arp_filter = 1

#accept_source_route - INTEGER
#	Accept source routing (routing extension header).
#
#	>= 0: Accept only routing header type 2.
#	< 0: Do not accept routing header.
#
#	Default: 0

net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

#accept_redirects - BOOLEAN
#	Accept ICMP redirect messages.
#	accept_redirects for the interface will be enabled if:
#	- both conf/{all,interface}/accept_redirects are TRUE in the case forwarding
#	  for the interface is enabled
#	or
#	- at least one of conf/{all,interface}/accept_redirects is TRUE in the case
#	  forwarding for the interface is disabled
#	accept_redirects for the interface will be disabled otherwise
#	default TRUE (host)
#		FALSE (router)

net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0

#secure_redirects - BOOLEAN
#	Accept ICMP redirect messages only for gateways,
#	listed in default gateway list.
#	secure_redirects for the interface will be enabled if at least one of
#	conf/{all,interface}/secure_redirects is set to TRUE,
#	it will be disabled otherwise
#	default TRUE

net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

#send_redirects - BOOLEAN
#	Send redirects, if router.
#	send_redirects for the interface will be enabled if at least one of
#	conf/{all,interface}/send_redirects is set to TRUE,
#	it will be disabled otherwise
#	Default: TRUE

net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

#tcp_fin_timeout - INTEGER
#	Time to hold socket in state FIN-WAIT-2, if it was closed
#	by our side. Peer can be broken and never close its side,
#	or even died unexpectedly. Default value is 60sec.
#	Usual value used in 2.2 was 180 seconds, you may restore
#	it, but remember that if your machine is even underloaded WEB server,
#	you risk to overflow memory with kilotons of dead sockets,
#	FIN-WAIT-2 sockets are less dangerous than FIN-WAIT-1,
#	because they eat maximum 1.5K of memory, but they tend
#	to live longer.	Cf. tcp_max_orphans.

net.ipv4.tcp_fin_timeout = 60

#tcp_syncookies - BOOLEAN
#	Only valid when the kernel was compiled with CONFIG_SYNCOOKIES
#	Send out syncookies when the syn backlog queue of a socket
#	overflows. This is to prevent against the common 'syn flood attack'
#	Default: FALSE
#
#	Note, that syncookies is fallback facility.
#	It MUST NOT be used to help highly loaded servers to stand
#	against legal connection rate. If you see synflood warnings
#	in your logs, but investigation	shows that they occur
#	because of overload with legal connections, you should tune
#	another parameters until this warning disappear.
#	See: tcp_max_syn_backlog, tcp_synack_retries, tcp_abort_on_overflow.
#
#	syncookies seriously violate TCP protocol, do not allow
#	to use TCP extensions, can result in serious degradation
#	of some services (f.e. SMTP relaying), visible not by you,
#	but your clients and relays, contacting you. While you see
#	synflood warnings in logs not being really flooded, your server
#	is seriously misconfigured.

net.ipv4.tcp_syncookies = 1

#tcp_syn_retries - INTEGER
#	Number of times initial SYNs for an active TCP connection attempt
#	will be retransmitted. Should not be higher than 255. Default value
#	is 5, which corresponds to ~180seconds.

net.ipv4.tcp_syn_retries = 1

#tcp_synack_retries - INTEGER
#	Number of times SYNACKs for a passive TCP connection attempt will
#	be retransmitted. Should not be higher than 255. Default value
#	is 5, which corresponds to ~180seconds.

net.ipv4.tcp_synack_retries = 1

#tcp_max_syn_backlog - INTEGER
#	Maximal number of remembered connection requests, which are
#	still did not receive an acknowledgment from connecting client.
#	Default value is 1024 for systems with more than 128Mb of memory,
#	and 128 for low memory machines. If server suffers of overload,
#	try to increase this number.

net.ipv4.tcp_max_syn_backlog = 4096

#icmp_echo_ignore_broadcasts - BOOLEAN
#	If set non-zero, then the kernel will ignore all ICMP ECHO and
#	TIMESTAMP requests sent to it via broadcast/multicast.
#	Default: 1

net.ipv4.icmp_echo_ignore_broadcasts = 1

#panic_on_oops:
#       Controls the kernel's behaviour when an oops or BUG is encountered.
#       0: try to continue operation
#       1: panic immediately.  If the `panic' sysctl is also non-zero then the
#          machine will be rebooted.

kernel.panic_on_oops = 1

#printk:
#       The four values in printk denote: console_loglevel,
#       default_message_loglevel, minimum_console_loglevel and
#       default_console_loglevel respectively.
#       These values influence printk() behavior when printing or
#       logging error messages. See 'man 2 syslog' for more info on
#       the different loglevels.
#       - console_loglevel: messages with a higher priority than
#         this will be printed to the console
#       - default_message_level: messages without an explicit priority
#         will be printed with this priority
#       - minimum_console_loglevel: minimum (highest) value to which
#         console_loglevel can be set
#       - default_console_loglevel: default value for console_loglevel

kernel.printk = 4 4 1 7

net.ipv4.tcp_timestamps = 0
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
kernel.sysrq = 0

net.ipv4.neigh.default.gc_thresh1 = 0


